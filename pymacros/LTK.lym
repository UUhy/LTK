<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Reload LTK Library</description>
 <version>1</version>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>macros_menu.my_group&gt;end("LTK").end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import sys
ls = sys.path

#Does a path to ltkpack exist
matches = [match for match in ls if "ltkpack" in match]
if (matches == []):
  #Find the klayout/python folder on Mac
  matches = [match for match in ls if "ayout/python" in match]
  if (matches != []):
    sys.path.append(matches[0] + '/ltkpack')
  else:
    #Find the klayout/ppython folder on Windows
    matches = [match for match in ls if "ayout\\python" in match]
    if (matches == []):
      raise Exception("Can not locate the python folder to create a path to ltkpack")
    sys.path.append(matches[0] + '\\ltkpack')

#Does a path to ltkpack exist
matches = [match for match in ls if "salt/LTK/python/ltkpack" in match]
if (matches == []):
  #Find the klayout/python folder on Mac
  matches = [match for match in ls if "ayout/salt/LTK/python" in match]
  if (matches != []):
    sys.path.append(matches[0] + '/ltkpack')
  else:
    #Find the klayout/ppython folder on Windows
    matches = [match for match in ls if "ayout\\salt\\LTK\\python" in match]
    if (matches == []):
      raise Exception("Can not locate the salt\LTK\python folder to create a path to ltkpack")
    sys.path.append(matches[0] + '\\ltkpack')

import pya

from alignmentMark import alignmentMark
from cassette import cassette
from checkerboard import checkerboard
from circle import circle
from cross import cross
from doseSeries import doseSeries
from fieldMarker import fieldMarker
from ring import ring
from shape import shape
from siWafer import siWafer
from vernier import vernier

class LTK(pya.Library):
  """
  Creates a library with PCells
  """

  def __init__(self):
  
    # Set the description
    self.description = "Lithography Tool Kit"
    
    # Create the PCell declarations
    self.layout().register_pcell("Alignment Mark", alignmentMark())
    self.layout().register_pcell("Shape: Checkerboard", checkerboard())
    self.layout().register_pcell("Shape: Circle", circle())
    self.layout().register_pcell("Shape: Cross", cross())
    self.layout().register_pcell("Shape: Ring", ring())
    self.layout().register_pcell("Shape: Wafer", siWafer())
    self.layout().register_pcell("Shape: Vernier", vernier())
    self.layout().register_pcell("Jeol: JBX-5500FS Cassette", cassette())
    self.layout().register_pcell("Jeol: Dose Series", doseSeries())
    self.layout().register_pcell("Jeol: Field Marker", fieldMarker())
    
    # Register the library
    self.register("LTK")

#-------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------

# Instantiate and register the library
LTK()</text>
</klayout-macro>
