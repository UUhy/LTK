<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Image to GDS</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>macros_menu.my_group&gt;end("LTK").end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Image to GDS Converter macro for Klayout
# Copyright (C) 2021  Long Chang
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.

import pya
import numpy as np
import matplotlib.image as mpimg

class imageToGDS(pya.QDialog):
  """
  Provides a dialog box interface to convert an image to a GDS layout
  """
  def __init__(self, parent = None):
   #Dialog Box constructor
    super(imageToGDS, self).__init__()
    #Stores the image data
    self.image = None
    #Initialize GUI elements
    self.initGUI()
    #Lay out GUI elements
    self.initLayout()
    #Connect GUI elements to functions
    self.initConnection()
  
  def initGUI(self):
    #Initialize GUI elements
    
    #Sets the window title
    self.setWindowTitle("Image to GDS Converter")
    #Sets the dialog box size 
    self.resize(350, 120)

    #Create label elements
    self.labelPixel = pya.QLabel('Pixel [nm]: ', self)
    self.labelThreshold = pya.QLabel('Threshold [%]: ', self)
    
    #Create spinbox elements
    self.sbPixel = pya.QSpinBox(self)
    self.sbPixel.setRange(1,1000)
    self.sbPixel.setValue(100)
    self.sbPixel.setFixedWidth(50)
    self.sbPixel.setToolTip('The size of a single pixel.')
    
    self.sbThreshold = pya.QSpinBox(self)
    self.sbThreshold.setRange(1,99)
    self.sbThreshold.setValue(80)
    self.sbThreshold.setFixedWidth(50)
    self.sbThreshold.setToolTip('Black is 0%, White is 100%. Values BELOW the threshold is converted.')
    
    #Create checkbox elements
    self.cbMerge = pya.QCheckBox(self)
    self.cbMerge.setText('Merge pixels')
    self.cbMerge.setChecked(False)
    
    self.cbInvert = pya.QCheckBox(self)
    self.cbInvert.setText('Invert Threshold')
    self.cbInvert.setChecked(False)
    self.cbInvert.setToolTip('Black is 0%, White is 100%, Values ABOVE the threshold is converted.')
    
    #Create button element
    self.bFileBrowser = pya.QPushButton(self)
    self.bFileBrowser.setText('Select An Image File')
    
    self.bConvert = pya.QPushButton(self)
    self.bConvert.setText('Convert')
    self.bConvert.setEnabled(False)
    
    #Create file dialog element
    self.fd = pya.QFileDialog(self)
    self.fd.setViewMode(self.fd.List)
    
  def initLayout(self):
    #Lay out GUI elements  
    
    #Line up elements horizontally
    self.hlFileBrowser = pya.QHBoxLayout()
    self.hlFileBrowser.addWidget(self.bFileBrowser)        
    
    #Line up elements horizontally    
    self.hlPixel = pya.QHBoxLayout()
    self.hlPixel.addWidget(self.labelPixel)
    self.hlPixel.addStretch()
    self.hlPixel.addWidget(self.sbPixel)
    
    #Line up elements horizontally    
    self.hlThreshold = pya.QHBoxLayout()
    self.hlThreshold.addWidget(self.labelThreshold)
    self.hlThreshold.addStretch()
    self.hlThreshold.addWidget(self.sbThreshold)
    
    #Line up elements horizontally
    self.hlMerge = pya.QHBoxLayout()
    self.hlMerge.addWidget(self.cbMerge) 
    self.hlMerge.addStretch()
    self.hlMerge.addWidget(self.cbInvert)      
    
    #Line up elements vertically    
    self.verticalLayout = pya.QVBoxLayout(self)
    self.verticalLayout.addLayout(self.hlFileBrowser)
    self.verticalLayout.addLayout(self.hlPixel)
    self.verticalLayout.addLayout(self.hlThreshold)
    self.verticalLayout.addLayout(self.hlMerge)
    self.verticalLayout.addWidget(self.bConvert)
    
    #Set the layout
    self.setLayout(self.verticalLayout)
  
  def initConnection(self):
    #Connect GUI elements to functions
    
    #When bFileBrowser is clicked, execute the function loadImage()
    self.bFileBrowser.clicked(self.loadImage)
    
    #When bConvert is clicked, execute the function convert()
    self.bConvert.clicked(self.convert)
  
  def loadImage(self):
    '''
    loadImage()
      
    Opens a file browser interface to select and load an image file
      
    Parameters
    ---------
    filename : From Interface
              The absolute file path to the image
      
    Returns
    ------
    image : np.ndarray
              The loaded image file
    
    Description
    ---------
    The image is loaded using matplotlib.image.imread(). The documentation does not specify the supported
    format.
    '''
    #If the file browser is executed
    if self.fd.exec_():
        #Get the path of the selected file
        filename = self.fd.selectedFiles()
        try:
          #Load the image
          self.image = mpimg.imread(filename[0])
          self.bConvert.setEnabled(True)
        except:
          #Raise an error if the image format isn't supported
          raise Exception("The selected file (" +  filename[0].split('/')[-1] + ")is not a supported image format")
    
  def convert(self, checked):
    '''
    convert()
      
    Converts the image into a GDS layout
      
    Parameters
    ---------
    Threshold : From Interface
              Pixels below the threshold will be converted to a GDS pixel
      
    Returns
    ------
    Image : A Cell
              A GDS layout of the image will be stored in a cell named Image and be made the active cell
    
    Description
    ---------
    This function converts an image into grayscale. Then a threshold is applied to convert the grayscale
    image into a binary image. Finally each pixel in the binary image is converted into a 1 um square
    in a GDS layout.
    '''
    
    #Gets a reference to the cell view
    cv = pya.CellView().active()
    
    #Gets a reference to the active layout
    layout = cv.layout()
    layer = layout.layer(1,0)

    #Gets the active cell
    cell = layout.create_cell('Image')
    
    #If image is not grayscale, then convert it to grayscale
    if len(self.image.shape) &gt; 2:
      r, g, b = self.image[:,:,0], self.image[:,:,1], self.image[:,:,2]
      self.image = 0.299*r + 0.587*g + 0.114*b
    
    #Create a pixel polygon
    w = int(self.sbPixel.value/layout.dbu/1000)
    poly = pya.Box(0,0,w,w)
    
    #Locate all pixels that pass the threshold
    if self.cbInvert.isChecked():
      pos = np.argwhere(self.image &gt; float(self.sbThreshold.value)/100)*w
    else:
      pos = np.argwhere(self.image &lt;= float(self.sbThreshold.value)/100)*w
     
    #Track the conversion progress
    counter = 0.0
    progress = 0.01
    nPos = len(pos)
     
    #Insert pixel polygons into the cell
    for i in pos:
      t = pya.Trans(int(i[1]),int(-i[0]))
      cell.shapes(layer).insert(t.trans(poly))
      
      #Update the convert button text to display progress
      counter += 1
      if (counter/nPos &gt; progress):
        self.bConvert.setText('Converting... '  + str(int(progress*100)) + "%")
        self.repaint()
        progress = counter/nPos + 0.01
    
    #Select all polygons in the cell
    region = pya.Region.new(cell.begin_shapes_rec(layer))
    
    #Move the image so that the center of the bottom left pixel is at (0,0)
    t = pya.Trans(int(-region.bbox().left+w/2),int(-region.bbox().bottom+w/2))
    region.transform(t)
    
    #Merge selected polygons
    if self.cbMerge.isChecked():
      region.merge()
      #Clear the cell
      cell.clear()
      #Insert the merged polygons into the cell
      cell.shapes(layer).insert(region)
          
    #Close the dialog box
    self.close()
    
    #Make the image layout the active cell
    cv.cell = cell
    
    # Make the newly added layers visible
    pya.LayoutView.current().add_missing_layers()

# Instantiate the dialog and make it visible initially.
# Passing the main_window will make it stay on top of the main window.
dialog = imageToGDS(pya.Application.instance().main_window())
dialog.show()
</text>
</klayout-macro>
